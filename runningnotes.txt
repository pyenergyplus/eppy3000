2021-03-14
----------

something is not working in the pytest

- see temp.py to figure out
- remove a.idf when you are done

aha !!

- same error with
    - /Applications/EnergyPlus-9-3-0/ExampleFiles/Generators.idf
    - all files before it in example.txt were OK

2021-03-13
----------

Issue #76 easy conversions

- first need to locate the version of idf file - wrote function for this 
    - experimental - try to do this in functional programming.
- then need find the install location of that version
    - where the schema file is
- once the schema file is located, we are set

2020-08-06 20:00
----------------

try the follwoing functions:

- EPMunch.delete()
- EPMunch.copy(newname)
- EPMunch.?


2020-08-06 15:01
----------------

having a hard time making my prefered API work - DAMMIT ... got it working :-)

- changing eppyname actually changes the name

possible strategy:

- make a test class from Munch and experiment just with it using a debugger
- install Munch from a known folder
- call the classs Munchy :-)

- to keep the release write a function (rename_epobject) to explicitly change the name
- might also need explicit functions for 
    - delete
    - append
    - etc.

- rename_epobject -> how to do this.: 

Another strategy:

- delete the eppyname and add it back again

2020-08-05 11:03
----------------

TODO: test for epobject eppyname change

2020-08-04 17:17
----------------

- It is not making sense to have two subclasses of Munch (EPMunch and EPObject)
- tag the epobject with a key 'eppy_epobject' and make decisions based on that
    - May allow you to upgrade the print mechanism (__repr__, __str__)
    - I think works right now, but is fragile

2020-08-04 08:08
----------------

tracking issue 57 branches

- master -> i57_key -> i57_key1
- master -> i57_key2

basic structure of epJSON format::

    {
        "epjobjects_1": {
            "epj_1_name_1": {
                "field1": 1,
                "field2": 2
            },
            "epj_1_name_2": {
                "field1": 3,
                "field2": 4
            }
        },
        "epjobjects_2": {
            "epj_2_name_1": {
                "field1": 1,
                "field2": 2
            },
            "epj_2_name_2": {
                "field1": 3,
                "field2": 4
            }
        }
    }

analyzing it::


    {
    A.     "epjobjects_1": {
    A.1        "epj_1_name_1": {
                    "field1": 1,
                    "field2": 2
                },
    A.2        "epj_1_name_2": {
                    "field1": 3,
                    "field2": 4
                }
            },
    B.     "epjobjects_2": {
    B.1        "epj_2_name_1": {
                    "field1": 1,
                    "field2": 2
                },
    B.2        "epj_2_name_2": {
                    "field1": 3,
                    "field2": 4
                }
            }
    }

The epobjects are:

- A.1
- A.2
- B.1
- B.3
- These epbojects have to be descendant of Munch -> EPMunch
- anything above this can be a Munch (escept for the print functionality)

2020-07-22 06:20
----------------

redo tests with fixtures in test_modelmaker.py

2020-07-15 18:34
----------------

- ``eppykey`` and ``eppyname`` shoule engage setattr and getattr - DONE
- right now ``eppykey`` and ``eppyname`` are just fields the epMunch unconnected to the JSON

2020-07-05 11:41
----------------

Working on Tutorial

- consider naming conventions:
    - import eppy as eppy2000
    - import eppy3000 as eppy

Does not work - abandonded this idea

2020-07-04 20:07
----------------

- set up tutorial so it turns up in the docs - DONE

things in tutorial
``````````````````

- open and idf file and convert it to epj file
- print to show it. 

2019-06-17
----------

keeping track  of name changes

- idf -> epj - DONE
    - makes idfobject -> epjobjectj - DONE
    - makes idfmunch -> epjmunchj - DONE
        - make them to epobject, epmunchj - DONE

2019-06-15
----------

- modelmaker needs tests
- find the files where modelmake is imported
    - ./arrays.py
    - ./idf.py
    - ./json2idf.py
    - ./newidfobject.py
    - ./snipidf.py

2019-06-11
----------

try keeping a schema in a module.
It gets imported only once

- done tests for idfjjsonconverter
- use this test code to test all the files in the Example folder

2019-06-10
----------

see
https://code.activestate.com/recipes/66531/
for singleton - use to nesure not reading the schemea.json many times.
NOT USED

google search for borg
https://www.google.com/search?q=python+borg&oq=python+borg&aqs=chrome..69i57j69i61.2400j0j1&sourceid=chrome&ie=UTF-8
NOT USED

also see
https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s16.html
possibly use this.
NOT USED

2019-06-09
----------

Status

- got some
    - test coverage (check coverage to see what is left)
    - lint
    - doc string

TODO :
    - change names as shown below
    - pytest for idf2json etc -> can announce.
    - continue with coverage
    - integrate idf2json to Class EPJSON
    - use witheppy300 and py90_1eppy3000 to push eppy3000

2019-06-08
----------

Need to revisit the naming conventions

- idfobject -> epobject
- idfobjects -> epobjects
- key -> epkey
- Name -> objectname

- idf -> epj
- idd -> epschema
- \*.idf -> \*.epJSON

2019-06-03
----------

need to track down how to generate a JSON file from idf file.
Looks like you have to run the simulation.

You can run a JSON file in simulation
<https://unmethours.com/question/36590/can-we-use-epjson-as-input-file-to-run-energy-simulation/>

2019-06-02
----------

issue #20
read idf file
DONE

Look very feasible
- use the witheppy read using noeppy function to read the idf file in
- use the legacy idf def in the epjson to translate to json
- to save as idf - again use legacy idf def in the epjson

pathway
- start with simple objects and test run it
- then work with more complex objects
- finally test with all the files in the example folder


2018-12-24
----------

- set up one test - DONE
- do numpy type doc - MOSLTY DONE
- test setup.py - DONE
- deploy on pypi on pyenergyplus - DONE
- set up travis - DONE on santoshphilip
- set up travis on pyenergyplus

2018-12-16
----------

issues for the moment:

- IDF() will open a new IDD for each file
- if 'eppy_objidd' key not present - throw an IDD not available exception
- IDD has key `items` in the JSON that name-clashes with items function in dict

fixed issue #6

close to release. need the following
- newidfobject - DONE
- copyidfobject
- removeidfobject # popidfobject to be done later - DONE
- see if things break on the inner lists
- StringIO for IDD - DONE

notes to work thru while coding.

- include arg idd in IDF (not a singleton now)
- write an easyopen
- sort the print of the epMunch be IDD sort order
-
- need idd and idd_munch functions
    - idd.version
    - idd.objects # dict
    - iddobj.fieldnames
    - iddobj.fieldvalues
    - iddobj.fieldnames_simple
    - iddobj.fieldvalues_simple
    - iddobj.fieldnames_list
    - iddobj.fieldvalues_list
    - class IDD

idd.properties['BuildingSurface:Detailed'].patternProperties['.*'].properties.vertices.items()

iddMunch
