2024-04-06
----------

run unit testes for later versions of E+. It may fail. Opened an issue for this.

for now do development with E+ version 9.6


2024-04-03
----------

For schemaindbm:

E+ version lss than or equal to 9.3 don't have the key ``group``. So they give a key error. Set it to None


2023-09-22
----------

use <https://marianoguerra.github.io/json.human.js/> to see the format

::

    {
        "surface_type": {
            "type": "string",
            "enum": [
                "Ceiling",
                "Floor",
                "Roof",
                "Wall"
            ]
        },
        "construction_name": {
            "type": "string",
            "note": "To be matched with a construction in this input file",
            "data_type": "object_list",
            "object_list": [
                "ConstructionNames"
            ]
        },
        "zone_name": {
            "type": "string",
            "note": "Zone the surface is a part of.",
            "data_type": "object_list",
            "object_list": [
                "ZoneNames"
            ]
        },
        "space_name": {
            "type": "string",
            "note": "Space the surface is a part of (optional, see description of Space object for more details).",
            "data_type": "object_list",
            "object_list": [
                "SpaceNames"
            ]
        },
        "outside_boundary_condition": {
            "type": "string",
            "enum": [
                "Adiabatic",
                "Foundation",
                "Ground",
                "GroundBasementPreprocessorAverageFloor",
                "GroundBasementPreprocessorAverageWall",
                "GroundBasementPreprocessorLowerWall",
                "GroundBasementPreprocessorUpperWall",
                "GroundFCfactorMethod",
                "GroundSlabPreprocessorAverage",
                "GroundSlabPreprocessorCore",
                "GroundSlabPreprocessorPerimeter",
                "OtherSideCoefficients",
                "OtherSideConditionsModel",
                "Outdoors",
                "Surface",
                "Zone"
            ]
        },
        "outside_boundary_condition_object": {
            "type": "string",
            "data_type": "object_list",
            "object_list": [
                "OutFaceEnvNames"
            ],
            "note": "Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and the program will calculate the heat transfer appropriately If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel"
        },
        "sun_exposure": {
            "type": "string",
            "enum": [
                "",
                "NoSun",
                "SunExposed"
            ],
            "default": "SunExposed"
        },
        "wind_exposure": {
            "type": "string",
            "enum": [
                "",
                "NoWind",
                "WindExposed"
            ],
            "default": "WindExposed"
        },
        "view_factor_to_ground": {
            "note": "From the exterior of the surface Unused if one uses the reflections options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface",
            "default": "Autocalculate",
            "anyOf": [
                {
                    "type": "number",
                    "minimum": 0.0,
                    "maximum": 1.0
                },
                {
                    "type": "string",
                    "enum": [
                        "",
                        "Autocalculate"
                    ]
                }
            ]
        },
        "number_of_vertices": {
            "note": "shown with 120 vertex coordinates -- extensible object extensible -- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from inner fields. for clarity in any error messages, renumber the fields as well. (and changing z terminator to a comma , for all but last one which needs a semi-colon ;) vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are relative to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an absolute system.",
            "default": "Autocalculate",
            "anyOf": [
                {
                    "type": "number",
                    "minimum": 3.0
                },
                {
                    "type": "string",
                    "enum": [
                        "",
                        "Autocalculate"
                    ]
                }
            ]
        },
        "vertices": {
            "type": "array",
            "items": {
                "properties": {
                    "vertex_x_coordinate": {
                        "type": "number",
                        "units": "m"
                    },
                    "vertex_y_coordinate": {
                        "type": "number",
                        "units": "m"
                    },
                    "vertex_z_coordinate": {
                        "type": "number",
                        "units": "m"
                    }
                },
                "type": "object",
                "required": [
                    "vertex_x_coordinate",
                    "vertex_y_coordinate",
                    "vertex_z_coordinate"
                ]
            }
        }
    }

2023-04-21
----------

still on issue #80 -> what did I do. What is the documentation ?


git diff --name-only 0d4472b12eccac329bb86fdfcfffaf4a0e4c033c..0371bc82138ed902df6f54b8159574033adedebb

::

    docs/epjviewer.ipynb
    docs/eppy3000.dbm_functions.rst
    docs/eppy3000.rst
    docs/tutorial1.ipynb
    eppy3000/__init__.py
    eppy3000/dbm_functions/__init__.py
    eppy3000/dbm_functions/json2dbm.py
    eppy3000/dbm_functions/schemaindbm.py
    eppy3000/epj_mmapping.py
    eppy3000/epschema.py
    eppy3000/idfjsonconverter.py
    eppy3000/modelmaker.py
    eppy3000/resources/epJSON/V9_6/ShopWithPVandBattery.epJSON
    eppy3000/resources/epJSON/V9_6/ShopWithPVandBattery.idf
    eppy3000/resources/snippets/V9_3/constructions.epJSON
    eppy3000/resources/snippets/V9_6/Minimal.idf
    json_evaluation.rst
    requirements.txt
    requirements_dev.txt
    runningnotes.txt
    setup.cfg
    setup.py
    tests/test_epMunch.py
    tests/test_epj_mmapping.py
    tests/test_epjviewer.py
    tests/test_json2dbm.py
    tests/test_modelmaker.py
    tests/test_schemaindbm.py

    docs/epjviewer.ipynb
    docs/tutorial1.ipynb


2023-04-20
----------

reverted out of gradual typing using https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit

- what did I do in issue #80 - branch i80_dbm
- find out what this is and document it - is it usefull.


fix issue #83 -> FIXED

::

    tests/test_epMunch.py::TestEPMunch_simple::test_repr
      /Users/santosh/venvs/eppy3000_3_11/lib/python3.11/site-packages/_pytest/fixtures.py:902: PytestRemovedIn8Warning: Support for nose tests is deprecated and will be removed in a future release.
      tests/test_epMunch.py::TestEPMunch_simple::test_repr is using nose-specific method: `setup(self)`
      To remove this warning, rename it to `setup_method(self)`
      See docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose
        fixture_result = next(generator)

    tests/test_epMunch.py::TestEPMunch_simple::test_str
      /Users/santosh/venvs/eppy3000_3_11/lib/python3.11/site-packages/_pytest/fixtures.py:902: PytestRemovedIn8Warning: Support for nose tests is deprecated and will be removed in a future release.
      tests/test_epMunch.py::TestEPMunch_simple::test_str is using nose-specific method: `setup(self)`
      To remove this warning, rename it to `setup_method(self)`
      See docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose
        fixture_result = next(generator)

    -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

- Replace the setup with a fixture

2022-02-18
----------

We have a big problem:

- epj.popepobject() is not really doing it in self.epj (epj.epj)
- some fundametal rethinking is needed.
- use mutablemapping ? - see link below.
- https://stackoverflow.com/questions/3387691/how-to-perfectly-override-a-dict
- https://stackoverflow.com/questions/3387691/how-to-perfectly-override-a-dict

2021-12-29
----------

consider the argument for using YAML especaiily the use of comments.

- https://levelup.gitconnected.com/json-vs-yaml-6aa0243aefc6

2021-12-23
----------

start to use dbm

- see temp_dbm.py and temp_dbm1.py



2021-03-15
----------

Scratch:

write toidf_temp.py -> hand coded to convert epjson to idf for eplus9.3

- Generators.idf to Generators.epJSON using converter
- Generators.idf to g_eppy3000.epJSON using my temp.py
- Generators.epJSON to Generators_eppy3000.idf with toidf_temp.py
- g_eppy3000.epJSON to g_eppy3000.idf with toidf_temp.py
- compare Generators_eppy3000.idf vs g_eppy3000.idf (open and save using eppy)

- Generators.epJSON -> Generators_cp.epJSON
- Generators_cp.epJSON to Generators_cp.idf using converter

2021-03-14
----------

something is not working in the pytest

- see temp.py to figure out
- remove a.idf when you are done

aha !!

- same error with
    - /Applications/EnergyPlus-9-3-0/ExampleFiles/Generators.idf
    - all files before it in example.txt were OK

2021-03-13
----------

Issue #76 easy conversions

- first need to locate the version of idf file - wrote function for this
    - experimental - try to do this in functional programming.
- then need find the install location of that version
    - where the schema file is
- once the schema file is located, we are set

2020-08-06 20:00
----------------

try the follwoing functions:

- EPMunch.delete()
- EPMunch.copy(newname)
- EPMunch.?


2020-08-06 15:01
----------------

having a hard time making my prefered API work - DAMMIT ... got it working :-)

- changing eppyname actually changes the name

possible strategy:

- make a test class from Munch and experiment just with it using a debugger
- install Munch from a known folder
- call the classs Munchy :-)

- to keep the release write a function (rename_epobject) to explicitly change the name
- might also need explicit functions for
    - delete
    - append
    - etc.

- rename_epobject -> how to do this.:

Another strategy:

- delete the eppyname and add it back again

2020-08-05 11:03
----------------

TODO: test for epobject eppyname change

2020-08-04 17:17
----------------

- It is not making sense to have two subclasses of Munch (EPMunch and EPObject)
- tag the epobject with a key 'eppy_epobject' and make decisions based on that
    - May allow you to upgrade the print mechanism (__repr__, __str__)
    - I think works right now, but is fragile

2020-08-04 08:08
----------------

tracking issue 57 branches

- master -> i57_key -> i57_key1
- master -> i57_key2

basic structure of epJSON format::

    {
        "epjobjects_1": {
            "epj_1_name_1": {
                "field1": 1,
                "field2": 2
            },
            "epj_1_name_2": {
                "field1": 3,
                "field2": 4
            }
        },
        "epjobjects_2": {
            "epj_2_name_1": {
                "field1": 1,
                "field2": 2
            },
            "epj_2_name_2": {
                "field1": 3,
                "field2": 4
            }
        }
    }

analyzing it::


    {
    A.     "epjobjects_1": {
    A.1        "epj_1_name_1": {
                    "field1": 1,
                    "field2": 2
                },
    A.2        "epj_1_name_2": {
                    "field1": 3,
                    "field2": 4
                }
            },
    B.     "epjobjects_2": {
    B.1        "epj_2_name_1": {
                    "field1": 1,
                    "field2": 2
                },
    B.2        "epj_2_name_2": {
                    "field1": 3,
                    "field2": 4
                }
            }
    }

The epobjects are:

- A.1
- A.2
- B.1
- B.3
- These epbojects have to be descendant of Munch -> EPMunch
- anything above this can be a Munch (escept for the print functionality)

2020-07-22 06:20
----------------

redo tests with fixtures in test_modelmaker.py

2020-07-15 18:34
----------------

- ``eppykey`` and ``eppyname`` shoule engage setattr and getattr - DONE
- right now ``eppykey`` and ``eppyname`` are just fields the epMunch unconnected to the JSON

2020-07-05 11:41
----------------

Working on Tutorial

- consider naming conventions:
    - import eppy as eppy2000
    - import eppy3000 as eppy

Does not work - abandonded this idea

2020-07-04 20:07
----------------

- set up tutorial so it turns up in the docs - DONE

things in tutorial
``````````````````

- open and idf file and convert it to epj file
- print to show it.

2019-06-17
----------

keeping track  of name changes

- idf -> epj - DONE
    - makes idfobject -> epjobjectj - DONE
    - makes idfmunch -> epjmunchj - DONE
        - make them to epobject, epmunchj - DONE

2019-06-15
----------

- modelmaker needs tests
- find the files where modelmake is imported
    - ./arrays.py
    - ./idf.py
    - ./json2idf.py
    - ./newidfobject.py
    - ./snipidf.py

2019-06-11
----------

try keeping a schema in a module.
It gets imported only once

- done tests for idfjjsonconverter
- use this test code to test all the files in the Example folder

2019-06-10
----------

see
https://code.activestate.com/recipes/66531/
for singleton - use to nesure not reading the schemea.json many times.
NOT USED

google search for borg
https://www.google.com/search?q=python+borg&oq=python+borg&aqs=chrome..69i57j69i61.2400j0j1&sourceid=chrome&ie=UTF-8
NOT USED

also see
https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s16.html
possibly use this.
NOT USED

2019-06-09
----------

Status

- got some
    - test coverage (check coverage to see what is left)
    - lint
    - doc string

TODO :
    - change names as shown below
    - pytest for idf2json etc -> can announce.
    - continue with coverage
    - integrate idf2json to Class EPJSON
    - use witheppy300 and py90_1eppy3000 to push eppy3000

2019-06-08
----------

Need to revisit the naming conventions

- idfobject -> epobject
- idfobjects -> epobjects
- key -> epkey
- Name -> objectname

- idf -> epj
- idd -> epschema
- \*.idf -> \*.epJSON

2019-06-03
----------

need to track down how to generate a JSON file from idf file.
Looks like you have to run the simulation.

You can run a JSON file in simulation
<https://unmethours.com/question/36590/can-we-use-epjson-as-input-file-to-run-energy-simulation/>

2019-06-02
----------

issue #20
read idf file
DONE

Look very feasible
- use the witheppy read using noeppy function to read the idf file in
- use the legacy idf def in the epjson to translate to json
- to save as idf - again use legacy idf def in the epjson

pathway
- start with simple objects and test run it
- then work with more complex objects
- finally test with all the files in the example folder


2018-12-24
----------

- set up one test - DONE
- do numpy type doc - MOSLTY DONE
- test setup.py - DONE
- deploy on pypi on pyenergyplus - DONE
- set up travis - DONE on santoshphilip
- set up travis on pyenergyplus

2018-12-16
----------

issues for the moment:

- IDF() will open a new IDD for each file
- if 'eppy_objidd' key not present - throw an IDD not available exception
- IDD has key `items` in the JSON that name-clashes with items function in dict

fixed issue #6

close to release. need the following
- newidfobject - DONE
- copyidfobject
- removeidfobject # popidfobject to be done later - DONE
- see if things break on the inner lists
- StringIO for IDD - DONE

notes to work thru while coding.

- include arg idd in IDF (not a singleton now)
- write an easyopen
- sort the print of the epMunch be IDD sort order
-
- need idd and idd_munch functions
    - idd.version
    - idd.objects # dict
    - iddobj.fieldnames
    - iddobj.fieldvalues
    - iddobj.fieldnames_simple
    - iddobj.fieldvalues_simple
    - iddobj.fieldnames_list
    - iddobj.fieldvalues_list
    - class IDD

idd.properties['BuildingSurface:Detailed'].patternProperties['.*'].properties.vertices.items()

iddMunch
